/* ------------------------------------------------------------------
 *  SLURM executor + global retry policy
 * ------------------------------------------------------------------ */
process {
    clusterOptions = '--ntasks=1 --nodes=1'
    errorStrategy  = 'retry'
    maxRetries     = 3
}

executor {
    name           = 'slurm'
    submitTimeout  = '3 min'
    pollInterval   = '30 sec'
    perCpuMemAllocation = false
    queueSize      = 10
}

/* ------------------------------------------------------------------
 *  Resource tiers (retry doubles time, x1.5 memory unless noted)
 * ------------------------------------------------------------------ */
process {
    withLabel: nano {
        cpus   = 20
        memory = { 512.MB * Math.pow(1.5, task.attempt-1) }
        time   = {  5.m   * (long)Math.pow(2,   task.attempt-1) }
    }

    withLabel: micro {
        cpus   = 20
        memory = {   2.GB * Math.pow(1.5, task.attempt-1) }
        time   = { 45.m   * (long)Math.pow(2,   task.attempt-1) }
    }

    withLabel: small {
        cpus   = 20
        memory = {   8.GB * Math.pow(1.5, task.attempt-1) }
        time   = {  3.h   * (long)Math.pow(2,   task.attempt-1) }
    }

    withLabel: medium {
        cpus   = 20
        memory = {  24.GB * Math.pow(1.5, task.attempt-1) }
        time   = {  6.h   * (long)Math.pow(2,   task.attempt-1) }
    }

    withLabel: large_short {
        cpus   = 20
        memory = {  64.GB * Math.pow(1.2, task.attempt-1) }   // gentler growth
        time   = {  2.h   * (long)Math.pow(2,   task.attempt-1) }
    }

    withLabel: large {
        cpus   = 20
        memory = {  64.GB * Math.pow(1.5, task.attempt-1) }
        time   = { 24.h   * (long)Math.pow(2,   task.attempt-1) }
    }

    withLabel: xlarge {
        cpus   = 32
        memory = { 256.GB * Math.pow(1.5, task.attempt-1) }
        time   = { 72.h   * (long)Math.pow(2,   task.attempt-1) }
    }

    withLabel: large_memory {
        cpus   = { params.threads ?: 8 }
        memory = '250 GB'
        time   = '2h'
    }

    withLabel: medium_memory {
        cpus   = { params.threads ?: 8 }
        memory = '100 GB'
        time   = '2h'
    }

    withLabel: dedup {
        cpus   = 12
        memory = '50 GB'
        time   = '2h'
    }

    withLabel: small_memory_medium_time {
        cpus   = { params.threads ?: 4 }
        memory = '50 GB'
        time   = '6h'
    }

    withLabel: small_memory {
        cpus   = { params.threads ?: 4 }
        memory = '80 GB'
        time   = '6h'
    }

    withLabel: small_memory_short_time {
        cpus   = { params.threads ?: 4 }
        memory = '20 GB'
        time   = '1h'
    }

    /* label with its own retry-scale rule */
    withLabel: small_memory_long_time {
        cpus         = { params.threads ?: 4 }
        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries    = 1
        memory        = { 60.GB * (task.attempt > 1 ? 1.5 : 1) }
        time          = {  8.h  * (task.attempt > 1 ? 1.5 : 1) }
    }
}
